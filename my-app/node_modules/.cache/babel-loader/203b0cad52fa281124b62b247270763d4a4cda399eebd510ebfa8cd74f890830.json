{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuri_terato\\\\Documents\\\\GitHub\\\\coworking\\\\my-app\\\\src\\\\Components\\\\Spaces\\\\ListSpaces.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ListSpaces.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListSpaces() {\n  _s();\n  const [spaces, setSpaces] = useState([]); // Lista de espaços\n  const [message, setMessage] = useState('');\n\n  // Função para buscar os espaços\n  const fetchSpaces = () => {\n    fetch('http://localhost:5071/spaces', {\n      method: 'GET'\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Falha ao buscar espaços.');\n      }\n    }).then(data => {\n      setSpaces(data); // Armazena os espaços no estado\n      setMessage('');\n    }).catch(error => {\n      setMessage(error.message);\n    });\n  };\n\n  // Chama a função fetchSpaces quando o componente é montado\n  useEffect(() => {\n    fetchSpaces();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-spaces\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Lista de Espa\\xE7os\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"spaces-list\",\n      children: spaces.map(space => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"space-item\",\n        children: `Nome do Espaço: ${space.name}`\n      }, space.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(ListSpaces, \"zexmzJ6f/cyyxyOUh2sJsmf4jdk=\");\n_c = ListSpaces;\nexport default ListSpaces;\nvar _c;\n$RefreshReg$(_c, \"ListSpaces\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ListSpaces","_s","spaces","setSpaces","message","setMessage","fetchSpaces","fetch","method","then","response","ok","json","Error","data","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","space","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Yuri_terato/Documents/GitHub/coworking/my-app/src/Components/Spaces/ListSpaces.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ListSpaces.css';\n\nfunction ListSpaces() {\n  const [spaces, setSpaces] = useState<any[]>([]); // Lista de espaços\n  const [message, setMessage] = useState('');\n\n  // Função para buscar os espaços\n  const fetchSpaces = () => {\n    fetch('http://localhost:5071/spaces', {\n      method: 'GET',\n    })\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Falha ao buscar espaços.');\n        }\n      })\n      .then((data) => {\n        setSpaces(data); // Armazena os espaços no estado\n        setMessage('');\n      })\n      .catch((error) => {\n        setMessage(error.message);\n      });\n  };\n\n  // Chama a função fetchSpaces quando o componente é montado\n  useEffect(() => {\n    fetchSpaces();\n  }, []);\n\n  return (\n    <div className=\"list-spaces\">\n      <h2 className=\"title\">Lista de Espaços</h2>\n      {message && <p className=\"message\">{message}</p>}\n      <ul className=\"spaces-list\">\n        {spaces.map((space) => (\n          <li key={space.id} className=\"space-item\">\n            {`Nome do Espaço: ${space.name}`}\n            </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ListSpaces;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAQ,EAAE,CAAC,CAAC,CAAC;EACjD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBC,KAAK,CAAC,8BAA8B,EAAE;MACpCC,MAAM,EAAE;IACV,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;IACF,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdX,SAAS,CAACW,IAAI,CAAC,CAAC,CAAC;MACjBT,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,CAAC,CACDU,KAAK,CAAEC,KAAK,IAAK;MAChBX,UAAU,CAACW,KAAK,CAACZ,OAAO,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC;;EAED;EACAP,SAAS,CAAC,MAAM;IACdS,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAKkB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BnB,OAAA;MAAIkB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1ClB,OAAO,iBAAIL,OAAA;MAAGkB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAEd;IAAO;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDvB,OAAA;MAAIkB,SAAS,EAAC,aAAa;MAAAC,QAAA,EACxBhB,MAAM,CAACqB,GAAG,CAAEC,KAAK,iBAChBzB,OAAA;QAAmBkB,SAAS,EAAC,YAAY;QAAAC,QAAA,EACtC,mBAAmBM,KAAK,CAACC,IAAI;MAAE,GADzBD,KAAK,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEX,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACrB,EAAA,CA3CQD,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AA6CnB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}